const path = require("path");
const fs = require("fs");
let dataFromUsers = fs.readFileSync(path.join(__dirname, "./users.json"),{encoding: "utf-8"});
let dataFromItems = fs.readFileSync(path.join(__dirname, "./items.json"),{encoding: "utf-8"});


//–ø–∞—Ä—Å–∏–º –∏–Ω—Ñ—É –∏–∑ json –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ —é–∑–µ—Ä–æ–≤
let items = {
    ...JSON.parse(dataFromItems)
};
let users = {
    ...JSON.parse(dataFromUsers)
};
function restoreJson(){ //–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–µ—Å—Å–∏–∏
    fs.writeFileSync(path.join(__dirname, "./users.json"), JSON.stringify(users), {encoding: "utf-8"});
    fs.writeFileSync(path.join(__dirname, "./items.json"), JSON.stringify(items), {encoding: "utf-8"});
}
function returnListOfItems(){//–≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–∞—Å—Å–∏–≤ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å –∫–∞—Ç–∞–ª–æ–≥–∞–º–∏
    const keys = Object.keys(items);
    let id = 0;
    listOfItems = [];
    for(const key of keys){
        const itemObj = {
            id: id++,
            itemName: key,
            itemImg: items[key].image,
            price: +items[key].price,
            retailer: items[key].retailer, 
            rating: +items[key].rating,
            sales: +items[key].sales,
            category: items[key].category,
            reviews: items[key].reviews,
            numOfReviews: items[key].reviews.length
        };
        listOfItems.push(itemObj);
    }
    return listOfItems;
}
function returnModifyingListOfUsers(){//—Å–ø–∏—Å–æ—á–µ–∫ —é–∑–µ—Ä–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞ –Ω–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    const keys = Object.keys(users);
    listOfUsers = [];
    let id = 0;
    for(const key of keys){
        if(users[key].role !== "moderator"){ //–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∑–∞–±–∞–Ω–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞!!!
            const itemObj = {
                id: id++,
                login: key,
                image: users[key].image,
                role: users[key].role, 
                banned: users[key].banned
            };
            if(users[key].role == "retailer"){
                itemObj.numOfComplains = users[key].numOfComplains;
            }
            listOfUsers.push(itemObj);
        }
    }
    return listOfUsers;
}
function ifUserExists(login){//–∞ —Ç—ã –≤–æ–æ–±—â–µ –µ—Å—Ç—å?
    const keys = Object.keys(users);
    for (const key of keys){
        if(key == login){
            return true;
        }
    }
    return false;
}
function ifItemExists(name){//–∞ —Ç—ã –≤–æ–æ–±—â–µ –µ—Å—Ç—å?
    const keys = Object.keys(items);
    for (const key of keys){
        if(key == name){
            return true;
        }
    }
    return false;
}
function ifItemInArray(array, name){//–∞ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç –µ—Å—Ç—å –≤ –º–∞—Å—Å–∏–≤–µ?
    for(let i = 0; i < array.length; i++){
        if(array[i] == name){
            return true;
        }
    }
    return false;
}
function addNewUser(obj){//–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —é–∑–µ—Ä–∞
    const {login, password, role, image} = obj;
    if(!ifUserExists(login)){
        if(login && password && role){
            users[login] = {
                password: password,
                role: role,
                banned: false
            };
            if(role == "moderator"){
                users[login].moderate = true; //.moderate –¥–ª—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –±—ã–ª–æ —É–¥–æ–±–Ω–µ–µ —Å hbs
            }else if(role == "retailer"){
                users[login].retail = true; //.retail –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ –¥–ª—è hbs 
                users[login].items = [];
                users[login].numOfComplains = 0;
            }else{
                users[login].shop = true; //.shop –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –¥–ª—è hbs
                users[login].cart_items = [];
                users[login].items = [];
            }
        if(image !== ""){
            users[login].image = image;
        }
            restoreJson();
            return "–ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!";
        }
        return "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!";
    }
    return "–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!";
}
function checkUser(login, password){ //–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if(ifUserExists(login)){
        if(users[login].banned == true){
            return false;
        }
        if(password == users[login].password){
            return {login: login, ...users[login]};
        }
    }
    return false;
}
function addNewItem(obj){//–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
    const {name, price, category, retailer, image} = obj;
    if(!ifItemExists(name) && name && price && category){
        items[name] = {
            price: +price,
            category: category,
            retailer: retailer,
            sales: 0,
            rating: 0,
            image: image, 
            reviews: []
        };
        users[retailer].items.push(name);
        restoreJson();
        return "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!";
    }
    return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!";
}
function deleteUserById(id, array){//—É–¥–∞–ª—è–µ–º —é–∑–µ—Ä–∞ –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É
    const name = array[id].login;
    delete users[name];
    restoreJson();
}
function banUser(id, array){//–∑–∞–±–∞–Ω–∏—Ç—å —é–∑–µ—Ä–∞
    const name = array[id].login;
    users[name].banned = true;
    restoreJson();
}
function unbanUser(id, array){//—Ä–∞–∑–±–∞–Ω–∏—Ç—å 
    const name = array[id].login;
    users[name].banned = false;
    restoreJson();
}
function addItemToCartById(id, array, login){//–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É
    if(users[login].role == "customer"){
        const item = array[id].itemName;
        if(ifItemInArray(users[login].cart_items, item)){
            return "–¢–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ!";
        }
        users[login].cart_items.push(item);
        restoreJson();
        return "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!";
    }
    return "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º!";
    
}
function deleteItemFromCartById(id, login){//—É–¥–∞–ª—è–µ–º –ø–æ –∞–π–¥–∏—à–Ω–∏–∫—É —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
    users[login].cart_items.splice(id, 1);
    restoreJson();
    return "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã!";
}
function returnListOfObjectsByNames(arrayOfNames){//–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –ø–æ –º–∞—Å—Å–∏–≤—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏(–Ω—É–∂–Ω–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É –∫–æ—Ä–∑–∏–Ω—ã –∏ –ª–∏—Å—Ç–∞ –ø–æ–∫—É–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
    let listOfObjects = [];
    for(let i = 0; i < arrayOfNames.length; i++){
        let obj = items[arrayOfNames[i]];
        obj.id = +i;
        listOfObjects.push({itemName: arrayOfNames[i], ...obj});
    }
    return listOfObjects;
}
function returnListOfPurchases(array){//–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫
    let list = [];
    for(let i = 0; i < array.length; i++){
        let obj = items[array[i].name];
        obj.id = +i;
        obj.isReviewed = array[i].isReviewed;
        obj.isRated = array[i].isRated;
        obj.isComplained = array[i].isComplained;
        list.push(obj);
    }
    return list;
}
function addPurchase(itemName, userName){//–æ–ø–ª–∞—Ç–∏—Ç—å —Ç–æ–≤–∞—Ä
    items[itemName].sales +=1;
    let purchase = {
        name: itemName,
        isReviewed: false,
        isRated: false
    }
    users[userName].items.push(purchase);
    restoreJson();
}
function returnListOfFilteredItems(category){//–≤–µ—Ä–Ω—É—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    let array = returnListOfItems();
    if(category==""){
        return array;
    }
    for(let i = 0; i < array.length; i++){
        if(array[i].category !== category){
            array.splice(i, 1);
            i--;
        }
    }
    return array;
}
function getListOfItemsBySubname(subname){//–¥–ª—è searchBar –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä—ã –ø–æ —Å—É–±—Å—Ç—Ä–æ–∫–µ
    let array = returnListOfItems();
    let listOfItems = [];
    for(let i = 0; i < array.length; i++){
        if(array[i].itemName.toLowerCase().includes(subname.toLowerCase())){
            listOfItems.push(array[i]);
        }
    }
    return listOfItems;
}

function addReview(name, review, login){//–æ—Ç–∑—ã–≤—ã –Ω–∞ —Ç–æ–≤–∞—Ä—ã!
    if(review == ""){
        return false;
    }
    let obj = {
        user: login,
        review: review
    }
    items[name].reviews.push(obj);
    restoreJson();
    return true;
}
function addRating(name){//–æ—Ç–º–µ—Ç–æ—á–∫–∞ "–ù—Ä–∞–≤–∏—Ç—Å—è"
    items[name].rating += 1;
    restoreJson();
}
function deleteRating(name){//–æ—Ç–º–µ—Ç–æ—á–∫–∞ "–ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"
    items[name].rating -= 1;
    restoreJson();
}
function returnReviews(name){//–≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Ç–æ–≤–∞—Ä
    let string = "";
    if(items[name].reviews.length < 1){
        return "–ü–æ–∫–∞ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –Ω–µ—Ç";
    }
    for(let i = 0; i<items[name].reviews.length; i++){
        string += items[name].reviews[i].user + "üìù:" + items[name].reviews[i].review + `\n`;
    }
    return string;
}
function listOfRetailersItems(retailer){//–¥–ª—è –≤–∫–ª–∞–¥–∫–∏ "–ú–æ–∏ —Ç–æ–≤–∞—Ä—ã" –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
    retailersItems = [];
    for(let i = 0; i<users[retailer].items.length; i++){
        let obj = items[users[retailer].items[i]];
        obj.id = +i;
        obj.itemName = users[retailer].items[i]
        obj.numOfReviews = items[users[retailer].items[i]].reviews.length;
        retailersItems.push(obj);
    }
    return retailersItems;
}
function deleteItem(name, login){//—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä
    delete items[name];
    for(let i = 0; i < users[login].items.length; i++){
        if(name == users[login].items[i]){
            users[login].items.splice(i, 1);
        }
    }
    restoreJson();
    return "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã!";
}
function changeItem(name, newPrice){//–∏–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä
    if(items[name].price == newPrice){
        return "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!";
    }
    items[name].price = newPrice;
    restoreJson();
    return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –∏–∑–º–µ–Ω–µ–Ω–∞!";
}
function complainOnRetailer(name){//–ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –Ω–µ–¥–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞:(
    users[name].numOfComplains += 1;
    restoreJson();
    return "–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!";
}

module.exports = {complainOnRetailer, changeItem, deleteItem, listOfRetailersItems, returnReviews, deleteRating, returnListOfPurchases, addReview, addRating, getListOfItemsBySubname, returnListOfFilteredItems, addPurchase, deleteItemFromCartById, returnListOfItems, addNewUser, checkUser, addNewItem, returnModifyingListOfUsers, deleteUserById, banUser, unbanUser, addItemToCartById, returnListOfObjectsByNames};